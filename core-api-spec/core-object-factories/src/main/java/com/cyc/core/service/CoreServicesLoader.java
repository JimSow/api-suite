/*
 * Copyright 2015 Cycorp, Inc..
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cyc.core.service;

/*
 * #%L
 * File: CoreServicesLoader.java
 * Project: Core API Object Factories
 * %%
 * Copyright (C) 2013 - 2015 Cycorp, Inc
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.cyc.kb.spi.KbFactoryServices;
import com.cyc.query.QueryFactory;
import com.cyc.query.spi.QueryFactoryService;
import com.cyc.session.exception.SessionServiceException;
import com.cyc.session.spi.SessionManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ServiceLoader;

/**
 * This class is solely responsible for loading Core API services, such as 
 * {@link com.cyc.kb.spi.KbFactoryServices}. Any other classes in this project which require 
 * Core API services should acquire them from this class.
 * 
 * <p>Note that the relevant service provider file in META-INF/services should be generated by the 
 * serviceloader-maven-plugin, specified in the provider project's pom.xml file.
 * 
 * @author nwinant
 */
public class CoreServicesLoader {
  
  // Fields
  
  private static final Logger LOGGER = LoggerFactory.getLogger(CoreServicesLoader.class);
  private static KbFactoryServices KB_FACTORY_SERVICES;
  private static QueryFactoryService QUERY_FACTORY_SERVICE;
  
  
  // Public

  public static List<SessionManager> loadAllSessionManagers() throws SessionServiceException {
    final List<SessionManager> sessionMgrs = new ArrayList();
    final ServiceLoader<SessionManager> loader
            = ServiceLoader.load(SessionManager.class);
    for (SessionManager sessionMgr : loader) {
      if (!sessionMgr.isClosed()) {
        sessionMgrs.add(sessionMgr);
      }
    }
    return sessionMgrs;
  }
  
  public static synchronized KbFactoryServices getKbFactoryServices() {
    if (KB_FACTORY_SERVICES == null) {
      final ServiceLoader<KbFactoryServices> kbServicesLoader = 
              ServiceLoader.load(KbFactoryServices.class);
      final Iterator<KbFactoryServices> kbServices = kbServicesLoader.iterator();
      KB_FACTORY_SERVICES = kbServices.next();
      LOGGER.info("Loaded KB service providers: {}", KB_FACTORY_SERVICES);
    }
    return KB_FACTORY_SERVICES;
  }
  
  public static synchronized QueryFactoryService getQueryFactoryService() {
    if (QUERY_FACTORY_SERVICE == null) {
      final ServiceLoader<QueryFactoryService> queryFactoryServiceLoader = 
              ServiceLoader.load(QueryFactoryService.class);
      final Iterator<QueryFactoryService> queryFactoryServices = 
              queryFactoryServiceLoader.iterator();
      QUERY_FACTORY_SERVICE = queryFactoryServices.next();
      LOGGER.info("Loaded " + QueryFactory.class.getSimpleName() 
              + " service provider: {}", QUERY_FACTORY_SERVICE);
    }
    return QUERY_FACTORY_SERVICE;
  }
  
}
